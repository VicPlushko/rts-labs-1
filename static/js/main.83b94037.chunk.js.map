{"version":3,"sources":["js/reducers/index.js","js/constants/action-types.js","js/store/index.js","components/Navbar.js","components/SearchForm.js","js/actions/index.js","utils/API.js","components/ArticleSearch.js","App.js","serviceWorker.js","index.js"],"names":["initialState","searchTerms","rootReducer","state","action","type","Object","assign","concat","payload","store","createStore","Navbar","className","Component","ConnectedSearchForm","handleSubmit","event","preventDefault","props","addSearch","setState","handleChange","target","value","onSubmit","this","id","placeholder","aria-label","title","onChange","SearchForm","connect","dispatch","search","searchTerm","axios","get","ArticleSearch","articles","searched","componentDidUpdate","prevProps","API","then","res","console","log","data","hits","map","article","index","key","author","href","url","rel","Article","App","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oMAEMA,EAAe,CACjBC,YAAa,IAYFC,MATf,WAAoD,IAA/BC,EAA8B,uDAAtBH,EAAcI,EAAQ,uCAC/C,MCPsB,eDOlBA,EAAOC,KACAC,OAAOC,OAAO,GAAIJ,EAAO,CAC5BF,YAAaE,EAAMF,YAAYO,OAAOJ,EAAOK,WAG9CN,GELIO,EAJDC,YACNT,G,4BCWOU,E,uKAVP,OACI,oCACI,yBAAKC,UAAU,gCACX,0BAAMA,UAAU,wBAAhB,iC,GANCC,a,ICQfC,E,4MACFZ,MAAQ,CACJF,YAAa,I,EAGjBe,aAAe,SAACC,GACZA,EAAMC,iBAEN,EAAKC,MAAMC,UAAU,EAAKjB,MAAMF,aAEhC,EAAKoB,SAAS,CACVpB,YAAa,M,EAKrBqB,aAAe,SAACL,GACZ,EAAKI,SAAS,CACVpB,YAAagB,EAAMM,OAAOC,S,uDAK9B,OACI,oCACI,yBAAKX,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mCACX,0BAAMA,UAAU,cACZY,SAAUC,KAAKV,cAEf,2BAAOH,UAAU,eAAeR,KAAK,SAASsB,GAAG,YAAYC,YAAY,sBAAsBC,aAAW,SACtGL,MAAOE,KAAKvB,MAAM2B,MAClBC,SAAUL,KAAKJ,eAEnB,4BAAQT,UAAU,uBAAuBc,GAAG,UAAUtB,KAAK,UAA3D,mB,GAnCES,aAkDnBkB,EALIC,YACf,MApDJ,SAA4BC,GACxB,MAAO,CACHd,UAAW,SAAAe,GAAM,OAAID,ECHlB,CAAE7B,KJHa,aIGKI,QDGiB0B,QAiD7BF,CAGjBlB,G,iBExDa,EACH,SAASqB,GACb,OAAOC,IAAMC,IAAI,qDAAuDF,EAAa,gBCKvFG,E,4MAEFpC,MAAQ,CACJqC,SAAU,GACVC,UAAU,G,EAGdC,mBAAqB,SAACC,GAEd,EAAKxB,MAAMlB,cAAgB0C,EAAU1C,aAErC2C,EAAW,EAAKzB,MAAMlB,aAAa4C,MAAK,SAAAC,GACpCC,QAAQC,IAAIF,EAAIG,MAChB,EAAK5B,SAAS,CACVmB,SAAUM,EAAIG,KAAKC,KACnBT,UAAU,Q,uDAatB,OAAKf,KAAKvB,MAAMsC,SAYPf,KAAKvB,MAAMsC,SAEZ,yBAAK5B,UAAU,aACX,yBAAKA,UAAU,OACVa,KAAKvB,MAAMqC,SAASW,KAAI,SAACC,EAASC,GAC/B,OACI,yBAAKxC,UAAU,kCAAkCyC,IAAKD,GAClD,yBAAKxC,UAAU,kBACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAcuC,EAAQtB,OACpC,wBAAIjB,UAAU,iCAAiCuC,EAAQG,QACvD,uBAAGC,KAAMJ,EAAQK,IAAKlC,OAAO,SAASmC,IAAI,sBAAsB7C,UAAU,aAA1E,gCAX/B,EAVG,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,oBACA,wBAAIA,UAAU,SACd,kG,GAlCIC,aAiEb6C,EADC1B,aArEQ,SAAA9B,GACpB,MAAO,CAAEF,YAAaE,EAAMF,eAoEhBgC,CAAyBM,G,MCxD1BqB,MAVf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,iBACE,kBAAC,IAAD,CAAUxD,MAAOA,GACf,kBAAC,EAAD,OAEFyD,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.83b94037.chunk.js","sourcesContent":["import { GET_SEARCH } from \"../constants/action-types\";\r\n\r\nconst initialState = {\r\n    searchTerms: \"\"\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n    if (action.type === GET_SEARCH) {\r\n        return Object.assign({}, state, {\r\n            searchTerms: state.searchTerms.concat(action.payload)\r\n        });\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default rootReducer;","export const GET_SEARCH = \"GET_SEARCH\";","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nconst store = createStore(\r\n        rootReducer\r\n    );\r\n\r\nexport default store;","import React, { Component } from \"react\";\r\n\r\nclass Navbar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <nav className=\"navbar navbar-light bg-light\">\r\n                    <span className=\"navbar-brand mb-0 h1\">RTS Labs React Exercise</span>\r\n                </nav>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addSearch } from \"../js/actions/index\";\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        addSearch: search => dispatch(addSearch(search))\r\n    };\r\n}\r\n\r\nclass ConnectedSearchForm extends Component {\r\n    state = {\r\n        searchTerms: \"\"\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.props.addSearch(this.state.searchTerms);\r\n\r\n        this.setState({\r\n            searchTerms: \"\"\r\n        });\r\n\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            searchTerms: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col col-sm-12 col-md-8 col-lg-6\">\r\n                            <form className=\"form-inline\" \r\n                                onSubmit={this.handleSubmit}\r\n                            >\r\n                                <input className=\"form-control\" type=\"search\" id=\"formInput\" placeholder=\"Search for articles\" aria-label=\"Search\"\r\n                                    value={this.state.title}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                                <button className=\"btn btn-outline-info\" id=\"formBtn\" type=\"submit\">Search</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst SearchForm = connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(ConnectedSearchForm);\r\n\r\nexport default SearchForm;","import { GET_SEARCH } from \"../constants/action-types\";\r\n\r\nexport function addSearch(payload) {\r\n    return { type: GET_SEARCH, payload }\r\n};","import axios from \"axios\";\r\n\r\nexport default {\r\n    search: function(searchTerm) {\r\n        return axios.get(\"http://hn.algolia.com/api/v1/search_by_date?query=\" + searchTerm + \"&tags=story\");\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport API from \"../utils/API\";\r\n\r\nconst mapStateToProps = state => {\r\n    return { searchTerms: state.searchTerms };\r\n};\r\n\r\n\r\nclass ArticleSearch extends Component {\r\n\r\n    state = {\r\n        articles: [],\r\n        searched: false\r\n    }\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n        // Checking if the store's state has changed\r\n        if (this.props.searchTerms !== prevProps.searchTerms) {\r\n\r\n            API.search(this.props.searchTerms).then(res => {\r\n                console.log(res.data);\r\n                this.setState({\r\n                    articles: res.data.hits,\r\n                    searched: true\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            return\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n\r\n        // If the user has not searched for an article, render this\r\n        if (!this.state.searched) {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"jumbotron\">\r\n                        <h1 className=\"display-4\">Hello, RTS Labs!</h1>\r\n                        <hr className=\"my-4\"/>\r\n                        <p>Please use the search bar above to search the Hacker News API</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        else if (this.state.searched) {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        {this.state.articles.map((article, index) => {\r\n                            return (\r\n                                <div className=\"col col-sm-12 col-md-6 col-lg-4\" key={index}>\r\n                                    <div className=\"card cardStyle\">\r\n                                        <div className=\"card-body\">\r\n                                            <h5 className=\"card-title\">{article.title}</h5>\r\n                                            <h6 className=\"card-subtitle mb-2 text-muted\">{article.author}</h6>\r\n                                            <a href={article.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"card-link\">Link to Article</a>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst Article = connect(mapStateToProps)(ArticleSearch);\r\nexport default Article;","import React from 'react';\n// import logo from './logo.svg';\nimport Navbar from \"./components/Navbar\";\nimport SearchForm from \"./components/SearchForm\";\nimport ArticleSearch from \"./components/ArticleSearch\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Navbar />\n      <SearchForm />\n      <ArticleSearch />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./js/store/index\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}